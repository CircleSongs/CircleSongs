version: 2.1

orbs:
  heroku: circleci/heroku@2.0.0
  node: circleci/node@7.1.0
  ruby: circleci/ruby@2.5.0
  browser-tools: circleci/browser-tools@1.5.2

commands:
  setup-environment:
    steps:
      - checkout
      - restore_cache:
          keys:
            - ruby-deps-v1-{{ checksum "Gemfile.lock" }}
            - ruby-deps-v1-
      - restore_cache:
          keys:
            - yarn-deps-v1-{{ checksum "yarn.lock" }}
            - yarn-deps-v1-
      - node/install:
          node-version: 23.8.0
      - node/install-packages:
          pkg-manager: yarn
      - run:
          name: Verify Yarn Cache
          command: |
            yarn config get cache-folder
            yarn cache list
      - ruby/install-deps:
          with-cache: false
      - save_cache:
          key: ruby-deps-v1-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - save_cache:
          key: yarn-deps-v1-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - run:
          name: Install System Dependencies
          command: |
            sudo apt-get update
            sudo apt-get install -y build-essential imagemagick
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      - run:
          command: |
            google-chrome --version
            chromedriver --version
          name: Check Chrome and ChromeDriver versions
      - run:
          name: Precompile assets with Vite
          command: |
            bundle exec vite install
            bundle exec vite build

jobs:
  test:
    docker:
      - image: cimg/ruby:3.3.0-browsers
        environment:
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          RAILS_ENV: test
          PGHOST: 127.0.0.1
          PGUSER: circle-songs
          PGPASSWORD: ""
      - image: cimg/postgres:14.0
        environment:
          POSTGRES_USER: circle-songs
          POSTGRES_DB: circle-songs_test
          POSTGRES_PASSWORD: ""
    parallelism: 3
    steps:
      - setup-environment
      - run:
          name: Wait for PostgreSQL
          command: |
            dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Database Setup
          command: |
            bundle exec rake db:schema:load
      - ruby/rspec-test
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: tmp/capybara

  deploy:
    executor: heroku/default
    steps:
      - checkout
      - heroku/install
      - heroku/deploy-via-git
      - run:
          name: "Heroku post-deploy steps"
          command: |
            heroku run rails db:migrate -a ${HEROKU_APP_NAME}
            heroku restart -a ${HEROKU_APP_NAME}

workflows:
  test-and-deploy:
    jobs:
      - test
      - deploy:
          requires:
            - test
          filters:
            branches:
              only: main
