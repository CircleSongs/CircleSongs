'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _formatter_base = require('./formatter_base');

var _formatter_base2 = _interopRequireDefault(_formatter_base);

var _tag = require('../chord_sheet/tag');

var _tag2 = _interopRequireDefault(_tag);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var NEW_LINE = '\n';

var ChordProFormatter = function (_FormatterBase) {
  _inherits(ChordProFormatter, _FormatterBase);

  function ChordProFormatter() {
    _classCallCheck(this, ChordProFormatter);

    return _possibleConstructorReturn(this, (ChordProFormatter.__proto__ || Object.getPrototypeOf(ChordProFormatter)).apply(this, arguments));
  }

  _createClass(ChordProFormatter, [{
    key: 'outputItem',
    value: function outputItem(item) {
      if (item instanceof _tag2.default) {
        this.output(this.formatTag(item));
      } else {
        this.outputChordLyricsPair(item);
      }
    }
  }, {
    key: 'outputChordLyricsPair',
    value: function outputChordLyricsPair(item) {
      if (item.chords) {
        this.output('[' + item.chords + ']');
      }

      if (item.lyrics) {
        this.output(item.lyrics);
      }
    }
  }, {
    key: 'formatTag',
    value: function formatTag(tag) {
      if (tag.hasValue()) {
        return '{' + tag.originalName + ': ' + tag.value + '}';
      }

      return '{' + tag.originalName + '}';
    }
  }, {
    key: 'endOfSong',
    value: function endOfSong() {}
  }, {
    key: 'newLine',
    value: function newLine() {
      if (this.stringOutput) {
        this.output(NEW_LINE);
      }
    }
  }]);

  return ChordProFormatter;
}(_formatter_base2.default);

exports.default = ChordProFormatter;