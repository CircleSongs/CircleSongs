'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _formatter_base = require('./formatter_base');

var _formatter_base2 = _interopRequireDefault(_formatter_base);

var _tag = require('../chord_sheet/tag');

var _tag2 = _interopRequireDefault(_tag);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var NEW_LINE = '\n';

var TextFormatter = function (_FormatterBase) {
  _inherits(TextFormatter, _FormatterBase);

  function TextFormatter() {
    _classCallCheck(this, TextFormatter);

    var _this = _possibleConstructorReturn(this, (TextFormatter.__proto__ || Object.getPrototypeOf(TextFormatter)).call(this));

    _this.dirtyLine = false;
    _this.chordsLine = '';
    _this.lyricsLine = '';
    return _this;
  }

  _createClass(TextFormatter, [{
    key: 'finishLine',
    value: function finishLine() {
      var output = '';
      var hasChords = !!this.chordsLine.trim().length;
      var hasLyrics = !!this.lyricsLine.trim().length;

      if (hasChords) {
        output += this.chordsLine.trimRight() + NEW_LINE;
      }

      if (hasLyrics || !hasChords) {
        output += this.lyricsLine.trimRight() + NEW_LINE;
      }

      this.output(output);
      this.chordsLine = '';
      this.lyricsLine = '';
    }
  }, {
    key: 'endOfSong',
    value: function endOfSong() {
      if (this.dirtyLine) {
        this.finishLine();
      } else {
        this.output(NEW_LINE);
      }
    }
  }, {
    key: 'newLine',
    value: function newLine() {
      if (this.dirtyLine) {
        this.finishLine();
      }
    }
  }, {
    key: 'padString',
    value: function padString(str, length) {
      var paddedString = str;
      for (var l = str.length; l < length; l += 1, paddedString += ' ') {}
      return paddedString;
    }
  }, {
    key: 'outputMetaData',
    value: function outputMetaData(song) {
      var title = song.title;
      var subtitle = song.subtitle;

      if (title) {
        this.output(title.toUpperCase() + NEW_LINE);
      }

      if (subtitle) {
        this.output(subtitle.trim() + NEW_LINE);
      }

      if (title || subtitle) {
        this.output(NEW_LINE);
      }
    }
  }, {
    key: 'outputItem',
    value: function outputItem(item) {
      if (item instanceof _tag2.default) {
        this.outputTagIfRenderable(item);
      } else {
        var chordsLength = item.chords.length;

        if (chordsLength) {
          chordsLength += 1;
        }

        var length = Math.max(chordsLength, item.lyrics.length);
        this.chordsLine += this.padString(item.chords, length);
        this.lyricsLine += this.padString(item.lyrics, length);
        this.dirtyLine = true;
      }
    }
  }, {
    key: 'outputTagIfRenderable',
    value: function outputTagIfRenderable(tag) {
      if (tag.isRenderable() && tag.hasValue()) {
        this.lyricsLine += tag.value;
        this.dirtyLine = true;
      }
    }
  }]);

  return TextFormatter;
}(_formatter_base2.default);

exports.default = TextFormatter;