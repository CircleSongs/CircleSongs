'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _song = require('../chord_sheet/song');

var _song2 = _interopRequireDefault(_song);

var _tag = require('../chord_sheet/tag');

var _constants = require('../constants');

var _parser_warning = require('./parser_warning');

var _parser_warning2 = _interopRequireDefault(_parser_warning);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var NEW_LINE = '\n';
var SQUARE_START = '[';
var SQUARE_END = ']';
var CURLY_START = '{';
var CURLY_END = '}';
var SHARP_SIGN = '#';

var ChordProParser = function () {
  function ChordProParser() {
    _classCallCheck(this, ChordProParser);
  }

  _createClass(ChordProParser, [{
    key: 'parse',
    value: function parse(document) {
      this.song = new _song2.default();
      this.lineNumber = 1;
      this.warnings = [];
      this.sectionType = _constants.NONE;
      this.resetTag();
      this.processor = this.readLyrics;
      this.parseDocument(document);
      this.song.finish();
      return this.song;
    }
  }, {
    key: 'parseDocument',
    value: function parseDocument(document) {
      for (var i = 0, count = document.length; i < count; i += 1) {
        this.processor(document[i]);
      }
    }
  }, {
    key: 'readLyrics',
    value: function readLyrics(chr) {
      switch (chr) {
        case SHARP_SIGN:
          this.processor = this.readComment;
          break;
        case NEW_LINE:
          this.lineNumber += 1;
          this.song.addLine();
          this.song.setCurrentLineType(this.sectionType);
          break;
        case SQUARE_START:
          this.song.addChordLyricsPair();
          this.processor = this.readChords;
          break;
        case CURLY_START:
          this.processor = this.readTag;
          break;
        default:
          this.song.lyrics(chr);
      }
    }
  }, {
    key: 'readChords',
    value: function readChords(chr) {
      switch (chr) {
        case NEW_LINE:
          break;
        case SQUARE_START:
          break;
        case SQUARE_END:
          this.processor = this.readLyrics;
          break;
        default:
          this.song.chords(chr);
      }
    }
  }, {
    key: 'readTag',
    value: function readTag(chr) {
      switch (chr) {
        case CURLY_END:
          this.finishTag();
          this.processor = this.readLyrics;
          break;
        default:
          this.tag += chr;
      }
    }
  }, {
    key: 'readComment',
    value: function readComment(chr) {
      switch (chr) {
        case NEW_LINE:
          this.processor = this.readLyrics;
          break;
        default:
          break;
      }
    }
  }, {
    key: 'finishTag',
    value: function finishTag() {
      var parsedTag = this.song.addTag(this.tag);
      this.applyTag(parsedTag);
      this.resetTag();
    }
  }, {
    key: 'resetTag',
    value: function resetTag() {
      this.tag = '';
    }
  }, {
    key: 'applyTag',
    value: function applyTag(tag) {
      switch (tag.name) {
        case _tag.START_OF_CHORUS:
          this.startSection(_constants.CHORUS, tag);
          break;

        case _tag.END_OF_CHORUS:
          this.endSection(_constants.CHORUS, tag);
          break;

        case _tag.START_OF_VERSE:
          this.startSection(_constants.VERSE, tag);
          break;

        case _tag.END_OF_VERSE:
          this.endSection(_constants.VERSE, tag);
          break;

        default:
          break;
      }
    }
  }, {
    key: 'startSection',
    value: function startSection(sectionType, tag) {
      this.checkCurrentSectionType(_constants.NONE, tag);
      this.sectionType = sectionType;
    }
  }, {
    key: 'endSection',
    value: function endSection(sectionType, tag) {
      this.checkCurrentSectionType(sectionType, tag);
      this.sectionType = _constants.NONE;
      this.song.setCurrentLineType(this.sectionType);
    }
  }, {
    key: 'checkCurrentSectionType',
    value: function checkCurrentSectionType(sectionType, tag) {
      if (this.sectionType !== sectionType) {
        this.addWarning('Unexpected tag {' + tag.originalName + ', current section is: ' + this.sectionType);
      }
    }
  }, {
    key: 'addWarning',
    value: function addWarning(message) {
      var warning = new _parser_warning2.default(message, this.lineNumber);
      this.warnings.push(warning);
    }
  }]);

  return ChordProParser;
}();

exports.default = ChordProParser;