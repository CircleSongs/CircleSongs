'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _song = require('../chord_sheet/song');

var _song2 = _interopRequireDefault(_song);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var WHITE_SPACE = /\s/;
var CHORD_LINE_REGEX = /^\s*((([A-G])(#|b)?([^/\s]*)(\/([A-G])(#|b)?)?)(\s|$)+)+(\s|$)+/;

var ChordSheetParser = function () {
  function ChordSheetParser() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$preserveWhitespa = _ref.preserveWhitespace,
        preserveWhitespace = _ref$preserveWhitespa === undefined ? true : _ref$preserveWhitespa;

    _classCallCheck(this, ChordSheetParser);

    this.preserveWhitespace = preserveWhitespace === true;
  }

  _createClass(ChordSheetParser, [{
    key: 'parse',
    value: function parse(document) {
      this.initialize(document);

      while (this.hasNextLine()) {
        var line = this.readLine();
        this.parseLine(line);
      }

      this.song.finish();
      return this.song;
    }
  }, {
    key: 'parseLine',
    value: function parseLine(line) {
      this.songLine = this.song.addLine();

      if (line.trim().length === 0) {
        this.chordLyricsPair = null;
      } else {
        this.parseNonEmptyLine(line);
      }
    }
  }, {
    key: 'parseNonEmptyLine',
    value: function parseNonEmptyLine(line) {
      this.chordLyricsPair = this.songLine.addChordLyricsPair();

      if (CHORD_LINE_REGEX.test(line) && this.hasNextLine()) {
        var nextLine = this.readLine();
        this.parseLyricsWithChords(line, nextLine);
      } else {
        this.chordLyricsPair.lyrics = '' + line;
      }
    }
  }, {
    key: 'initialize',
    value: function initialize(document) {
      this.song = new _song2.default();
      this.lines = document.split('\n');
      this.currentLine = 0;
      this.lineCount = this.lines.length;
      this.processingText = true;
    }
  }, {
    key: 'readLine',
    value: function readLine() {
      var line = this.lines[this.currentLine];
      this.currentLine += 1;
      return line;
    }
  }, {
    key: 'hasNextLine',
    value: function hasNextLine() {
      return this.currentLine < this.lineCount;
    }
  }, {
    key: 'parseLyricsWithChords',
    value: function parseLyricsWithChords(chordsLine, lyricsLine) {
      this.processCharacters(chordsLine, lyricsLine);

      this.chordLyricsPair.lyrics += lyricsLine.substring(chordsLine.length);

      this.chordLyricsPair.chords = this.chordLyricsPair.chords.trim();
      this.chordLyricsPair.lyrics = this.chordLyricsPair.lyrics.trim();

      if (!lyricsLine.trim().length) {
        this.songLine = this.song.addLine();
      }
    }
  }, {
    key: 'processCharacters',
    value: function processCharacters(chordsLine, lyricsLine) {
      for (var c = 0, charCount = chordsLine.length; c < charCount; c += 1) {
        var chr = chordsLine[c];
        var nextChar = chordsLine[c + 1];
        var isWhiteSpace = WHITE_SPACE.test(chr);
        this.addCharacter(chr, nextChar);

        this.chordLyricsPair.lyrics += lyricsLine[c] || '';
        this.processingText = !isWhiteSpace;
      }
    }
  }, {
    key: 'addCharacter',
    value: function addCharacter(chr, nextChar) {
      var isWhiteSpace = WHITE_SPACE.test(chr);

      if (!isWhiteSpace) {
        this.ensureChordLyricsPairInitialized();
      }

      if (!isWhiteSpace || this.shouldAddCharacterToChords(nextChar)) {
        this.chordLyricsPair.chords += chr;
      }
    }
  }, {
    key: 'shouldAddCharacterToChords',
    value: function shouldAddCharacterToChords(nextChar) {
      return nextChar && WHITE_SPACE.test(nextChar) && this.preserveWhitespace;
    }
  }, {
    key: 'ensureChordLyricsPairInitialized',
    value: function ensureChordLyricsPairInitialized() {
      if (!this.processingText) {
        this.chordLyricsPair = this.songLine.addChordLyricsPair();
        this.processingText = true;
      }
    }
  }]);

  return ChordSheetParser;
}();

exports.default = ChordSheetParser;