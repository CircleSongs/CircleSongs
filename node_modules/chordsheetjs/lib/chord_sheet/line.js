'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _chord_lyrics_pair = require('./chord_lyrics_pair');

var _chord_lyrics_pair2 = _interopRequireDefault(_chord_lyrics_pair);

var _tag = require('./tag');

var _tag2 = _interopRequireDefault(_tag);

var _utilities = require('../utilities');

var _constants = require('../constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Line = function () {
  function Line() {
    _classCallCheck(this, Line);

    this.items = [];
    this.currentChordLyricsPair = null;
    this.type = _constants.NONE;
  }

  _createClass(Line, [{
    key: 'isEmpty',
    value: function isEmpty() {
      return this.items.length === 0;
    }
  }, {
    key: 'addChordLyricsPair',
    value: function addChordLyricsPair() {
      this.currentChordLyricsPair = (0, _utilities.pushNew)(this.items, _chord_lyrics_pair2.default);
      return this.currentChordLyricsPair;
    }
  }, {
    key: 'ensureChordLyricsPair',
    value: function ensureChordLyricsPair() {
      if (!this.currentChordLyricsPair) {
        this.addChordLyricsPair();
      }
    }
  }, {
    key: 'chords',
    value: function chords(chr) {
      this.ensureChordLyricsPair();
      this.currentChordLyricsPair.chords += chr;
    }
  }, {
    key: 'lyrics',
    value: function lyrics(chr) {
      this.ensureChordLyricsPair();
      this.currentChordLyricsPair.lyrics += chr;
    }
  }, {
    key: 'addTag',
    value: function addTag(name, value) {
      var tag = name instanceof _tag2.default ? name : new _tag2.default(name, value);
      this.items.push(tag);
      return tag;
    }
  }, {
    key: 'hasRenderableItems',
    value: function hasRenderableItems() {
      return this.items.some(function (item) {
        return item.isRenderable();
      });
    }
  }, {
    key: 'clone',
    value: function clone() {
      var clonedLine = new Line();
      clonedLine.items = this.items.map(function (item) {
        return item.clone();
      });
      return clonedLine;
    }
  }, {
    key: 'isVerse',
    value: function isVerse() {
      return this.type === _constants.VERSE;
    }
  }, {
    key: 'isChorus',
    value: function isChorus() {
      return this.type === _constants.CHORUS;
    }
  }, {
    key: 'hasContent',
    value: function hasContent() {
      return this.items.some(function (item) {
        return item instanceof _chord_lyrics_pair2.default;
      });
    }
  }]);

  return Line;
}();

exports.default = Line;