'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _constants = require('../constants');

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Paragraph = function () {
  function Paragraph() {
    _classCallCheck(this, Paragraph);

    this.lines = [];
  }

  _createClass(Paragraph, [{
    key: 'addLine',
    value: function addLine(line) {
      this.lines.push(line);
    }
  }, {
    key: 'type',
    get: function get() {
      var types = this.lines.map(function (line) {
        return line.type;
      });
      var uniqueTypes = [].concat(_toConsumableArray(new Set(types)));

      if (uniqueTypes.length === 1) {
        return uniqueTypes[0];
      }

      return _constants.INDETERMINATE;
    }
  }]);

  return Paragraph;
}();

exports.default = Paragraph;