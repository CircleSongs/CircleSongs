'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ChordLyricsPair = function () {
  function ChordLyricsPair() {
    var chords = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var lyrics = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

    _classCallCheck(this, ChordLyricsPair);

    this.chords = chords;
    this.lyrics = lyrics;
  }

  _createClass(ChordLyricsPair, [{
    key: 'isRenderable',
    value: function isRenderable() {
      return true;
    }
  }, {
    key: 'clone',
    value: function clone() {
      return new ChordLyricsPair(this.chords, this.lyrics);
    }
  }, {
    key: 'toString',
    value: function toString() {
      return 'ChordLyricsPair(chords=' + this.chords + ', lyrics=' + this.lyrics + ')';
    }
  }]);

  return ChordLyricsPair;
}();

exports.default = ChordLyricsPair;